{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","getKeys","Object","keys","this","data","getHeader","map","key","index","toUpperCase","getRowsData","items","row","bind","class","React","Component","RenderRow","App","state","trades","getData","fetch","then","res","json","setState","intervalID","setTimeout","className","clearTimeout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAEqBA,E,YAEjB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAMRC,QAAU,WACR,OAAOC,OAAOC,KAAKC,KAAKJ,MAAMK,KAAK,KARnB,EAWlBC,UAAY,WAEV,OADWF,KAAKH,UACJM,KAAI,SAACC,EAAKC,GACpB,OAAO,wBAAID,IAAKA,GAAMA,EAAIE,mBAdZ,EAkBlBC,YAAc,WACZ,IAAIC,EAAQR,KAAKJ,MAAMK,KACnBF,EAAOC,KAAKH,UAChB,OAAOW,EAAML,KAAI,SAACM,EAAKJ,GACrB,OAAO,wBAAID,IAAKC,GAAO,kBAAC,EAAD,CAAWD,IAAKC,EAAOJ,KAAMQ,EAAKV,KAAMA,SApBjE,EAAKG,UAAY,EAAKA,UAAUQ,KAAf,gBACjB,EAAKH,YAAc,EAAKA,YAAYG,KAAjB,gBACnB,EAAKb,QAAU,EAAKA,QAAQa,KAAb,gBAJC,E,sEA2Bd,OACE,6BACE,2BAAOC,MAAM,uBACb,+BACE,4BAAKX,KAAKE,cAEZ,+BACGF,KAAKO,qB,GApCeK,IAAMC,WA6CnCC,EAAY,SAAClB,GACjB,OAAOA,EAAMG,KAAKI,KAAI,SAACC,EAAKC,GAC1B,OAAO,wBAAID,IAAKR,EAAMK,KAAKG,IAAOR,EAAMK,KAAKG,QCPlCW,E,2MA3BXC,MAAQ,CACJC,OAAQ,CAAC,K,EAMbC,QAAU,WACNC,MAAM,8BACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAnB,GACJ,EAAKsB,SAAS,CAAEN,OAAO,YAAKhB,KAE5B,EAAKuB,WAAaC,WAAW,EAAKP,QAAQR,KAAb,gBAAyB,S,wEAvB1D,OACE,yBAAKgB,UAAU,OACf,2CACE,kBAAC,EAAD,CAAOzB,KAAMD,KAAKgB,MAAMC,Y,0CAY5BjB,KAAKkB,Y,6CAkBLS,aAAa3B,KAAKwB,gB,GAnCRX,aCSEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.b3d7ebdd.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Table extends React.Component {\n\n    constructor(props){\n      super(props);\n      this.getHeader = this.getHeader.bind(this);\n      this.getRowsData = this.getRowsData.bind(this);\n      this.getKeys = this.getKeys.bind(this);\n    }\n\n    getKeys = function(){\n      return Object.keys(this.props.data[0]);\n    }\n\n    getHeader = function(){\n      var keys = this.getKeys();\n      return keys.map((key, index)=>{\n        return <th key={key}>{key.toUpperCase()}</th>\n      })\n    }\n\n    getRowsData = function(){\n      var items = this.props.data;\n      var keys = this.getKeys();\n      return items.map((row, index)=>{\n        return <tr key={index}><RenderRow key={index} data={row} keys={keys}/></tr>\n      })\n    }\n\n    render() {\n        return (\n          <div>\n            <table class=\"table table-striped\">\n            <thead>\n              <tr>{this.getHeader()}</tr>\n            </thead>\n            <tbody>\n              {this.getRowsData()}\n            </tbody>\n            </table>\n          </div>\n\n        );\n    }\n}\n\nconst RenderRow = (props) =>{\n  return props.keys.map((key, index)=>{\n    return <td key={props.data[key]}>{props.data[key]}</td>\n  })\n}\n","import React, {Component} from 'react';\nimport Table from './Table'\n\nclass App extends Component {\n    render() {\n        return (\n          <div className=\"App\">\n          <h3>Trades List</h3>\n            <Table data={this.state.trades}/>\n          </div>\n        )\n    }\n\n    intervalID;\n\n    state = {\n        trades: [{}]\n    };\n\n    componentDidMount() {\n        this.getData();\n    }\n    getData = () => {\n        fetch('http://0.0.0.0:5000/trades')\n          .then(res => res.json())\n          .then(data => {\n            this.setState({ trades: [...data] });\n            // call getData() again in 5 seconds\n            this.intervalID = setTimeout(this.getData.bind(this), 5000);\n          });\n      }\n      componentWillUnmount() {\n        /*\n          stop getData() from continuing to run even\n          after unmounting this component. Notice we are calling\n          'clearTimeout()` here rather than `clearInterval()` as\n          in the previous example.\n        */\n        clearTimeout(this.intervalID);\n      }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}